{"version":3,"sources":["components/RelationsRepeaterField.tsx","index.tsx"],"names":["RelationsRepeaterField","props","fieldValue","sdk","field","getValue","initialRows","map","value","key","uuid","useState","rows","setRows","instanceParameters","parameters","instance","referenceKey","quantity","quantityLabel","typeCode","typeCodeLabel","typeLabel","typeLabelLabel","defaultLocale","contentTypes","split","useEffect","window","startAutoResizer","unpopulatedRows","filter","row","name","length","console","log","referencedIds","space","getEntries","join","then","queryResult","populatedRows","resultForCurrentRow","items","entry","sys","id","pop","newRow","fields","code","allPopulatedRows","populateRow","find","item","entryId","sanitizedRows","sanitizedRow","setValue","onTextChanged","currentTextKey","rowIndex","e","updatedRows","target","style","marginTop","marginBottom","icon","buttonType","size","onClick","splice","onDragEnd","result","destination","source","prevRows","Array","from","index","removed","droppableId","provided","ref","innerRef","className","draggableId","draggableProps","dragHandleProps","userSelect","labelText","placeholder","data-index","onChange","width","svgHeight","numberOfLines","passedRow","onDeleteButtonClicked","options","dialogs","selectMultipleEntries","selectedRows","rowData","catch","init","root","document","getElementById","location","locations","LOCATION_ENTRY_FIELD","component","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.1642fa39.chunk.js","sourcesContent":["// @ts-nocheck\nimport { React, useState, useEffect } from \"react\";\nimport {\n  Button,\n  EditorToolbarButton,\n  SkeletonBodyText,\n  SkeletonContainer,\n  TextField,\n  Paragraph,\n  Card,\n  HelpText,\n} from \"@contentful/forma-36-react-components\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\nimport { v4 as uuid } from \"uuid\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst RelationsRepeaterField = (props: FieldProps) => {\n  const fieldValue = props.sdk.field.getValue() || [];\n  const initialRows = fieldValue\n    ? fieldValue.map((value) => ({ ...value, key: uuid() }))\n    : [];\n  const [rows, setRows] = useState(initialRows);\n  const instanceParameters = props.sdk.parameters.instance;\n  const referenceKey = instanceParameters.referenceKey || \"entryId\";\n  const quantity = instanceParameters.quantity || \"quantity\";\n  const quantityLabel = instanceParameters.quantityLabel || \"Quantity\";\n  const typeCode = instanceParameters.typeCode || \"typeCode\";\n  const typeCodeLabel = instanceParameters.typeCodeLabel || \"Type Code\";\n  const typeLabel = instanceParameters.typeLabel || \"typeLabel\";\n  const typeLabelLabel = instanceParameters.typeLabelLabel || \"Type Code Label\";\n  const defaultLocale = instanceParameters.defaultLocale || \"en-GB\";\n  const contentTypes = instanceParameters.contentTypes\n    ? instanceParameters.contentTypes.split(/\\s*,\\s*/g)\n    : ['topicProduct'];\n  const description = \"You can sort the rows by dragging them.\"\n\n  // use contentful's builtin auto-resizer\n  useEffect(() => {\n    props.sdk.window.startAutoResizer();\n  });\n\n  // check for unresolved names and fetch them from contenful if neccessary\n  useEffect(() => {\n    const unpopulatedRows = rows.filter((row) => !row.name);\n    if (!unpopulatedRows.length) {\n      return;\n    }\n    console.log(1);\n\n    const referencedIds = unpopulatedRows.map((row) => row[referenceKey]);\n    props.sdk.space\n      .getEntries({ \"sys.id[in]\": referencedIds.join(\",\") })\n      .then((queryResult) => {\n        let populatedRows = unpopulatedRows.map((row) => {\n          const resultForCurrentRow = queryResult.items\n            .filter((entry) => entry.sys.id === row[referenceKey])\n            .pop();\n            const newRow = {\n              ...row,\n            }\n            newRow.name = resultForCurrentRow ? resultForCurrentRow.fields.code[defaultLocale] : \"\";\n          return newRow;\n        });\n\n        const allPopulatedRows = rows.map(row => {\n          if(!row.name){\n            const populateRow = populatedRows.find(item => item.entryId === row.entryId)\n            if(populateRow){\n              row.name = populateRow.name;\n            }\n          }\n          return row;\n        })\n        setRows(allPopulatedRows);\n      });\n  }, [rows, props.sdk.space, referenceKey, defaultLocale]);\n\n  // update contentful field value whenever rows data changes\n  useEffect(() => {\n    console.log(2);\n    const sanitizedRows = rows.map((row) => {\n      const sanitizedRow = {};\n      sanitizedRow[quantity] = row[quantity] || \"\";\n      sanitizedRow[typeCode] = row[typeCode] || \"\";\n      sanitizedRow[typeLabel] = row[typeLabel] || \"\";\n      sanitizedRow[referenceKey] = row[referenceKey] || \"\";\n      return sanitizedRow;\n    });\n    props.sdk.field.setValue(sanitizedRows);\n  }, [rows, props.sdk.field, referenceKey, quantity, typeCode, typeLabel]);\n\n  // open entry selection dialog and append selected entries to the end of our list\n  const onAddButtonClicked = () => {\n    const options = {};\n    if (contentTypes) {\n      options.contentTypes = contentTypes;\n    }\n    props.sdk.dialogs\n      .selectMultipleEntries(options)\n      .then((selectedRows) => {\n        setRows([\n          ...rows,\n          ...selectedRows.map((row) => {\n            const rowData = {\n              key: uuid(),\n            };\n            rowData[quantity] = \"\";\n            rowData[typeCode] = \"\";\n            rowData[typeLabel] = \"\";\n            rowData[referenceKey] = row.sys.id;\n            return rowData;\n          }),\n        ]);\n      })\n      .catch(() => {\n        /* do nothing */\n      });\n  };\n\n  // update text field with new value\n  const onTextChanged = (currentTextKey, rowIndex, e) => {\n    const updatedRows = [...rows];\n    updatedRows[rowIndex][currentTextKey] = e.target.value;\n    setRows(updatedRows);\n  };\n\n  // remove row from list\n  const onDeleteButtonClicked = (passedRow) => {\n    const updatedRows = rows.filter((row) => row !== passedRow);\n    setRows(updatedRows);\n  };\n\n  // Called when row is re-ordered\n  const onDragEnd = (result) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    setRows((prevRows) => {\n      const result = Array.from(prevRows);\n      const [removed] = result.splice(source.index, 1);\n      result.splice(destination.index, 0, removed);\n      return result;\n    });\n  };\n\n  const onDeleteAllButtonClicked = () => {\n    rows.splice(0,rows.length)\n    setRows([]);\n  }\n\n  return (\n    <section>\n      <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n        <HelpText >{description}</HelpText>\n        <Button icon=\"Delete\" buttonType=\"negative\" size=\"small\" onClick={onDeleteAllButtonClicked}>\n          Delete All\n        </Button>\n      </div>\n      <div>\n        <DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n          <Droppable droppableId=\"rows\">\n            {(provided) => {\n              return (\n                <div ref={provided.innerRef} className=\"rows\">\n                  {rows.map((row, index) => {\n                    return (\n                      <Draggable\n                        key={`${row.id}-${index}`}\n                        draggableId={`${row.id}-${index}`}\n                        index={index}\n                      >\n                        {(provided) => {\n                          return (\n                            <div\n                              key={row.key}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              ref={provided.innerRef}\n                              style={{\n                                userSelect: \"none\",\n                                marginBottom: \"10px\",\n                                ...provided.draggableProps.style,\n                              }}\n                            >\n                              <Card className=\"row\">\n                                <div>\n                                  <Paragraph>{index + 1}</Paragraph>\n                                </div>\n                                <div>\n                                  <TextField\n                                    value={row[quantity]}\n                                    labelText={quantityLabel}\n                                    placeholder={quantityLabel}\n                                    data-index={index}\n                                    onChange={(e) => onTextChanged(quantity, index, e)}\n                                  ></TextField>\n                                </div>\n                                <div>\n                                  <TextField\n                                    value={row[typeCode]}\n                                    labelText={typeCodeLabel}\n                                    placeholder={typeCodeLabel}\n                                    data-index={index}\n                                    onChange={(e) => onTextChanged(typeCode, index, e)}\n                                  ></TextField>\n                                </div>\n                                <div>\n                                  <TextField\n                                    value={row[typeLabel]}\n                                    labelText={typeLabelLabel}\n                                    placeholder={typeLabelLabel}\n                                    data-index={index}\n                                    onChange={(e) => onTextChanged(typeLabel, index, e)}\n                                  ></TextField>\n                                </div>\n                                <div style={{ width: \"200px\" }}>\n                                  {row.name ? (\n                                    <Paragraph>{row.name}</Paragraph>\n                                  ) : (\n                                    <SkeletonContainer svgHeight=\"20\">\n                                      <SkeletonBodyText numberOfLines=\"1\"></SkeletonBodyText>\n                                    </SkeletonContainer>\n                                  )}\n                                </div>\n                                <div className=\"delete\">\n                                  <EditorToolbarButton\n                                    icon=\"Delete\"\n                                    data-index={index}\n                                    onClick={() => onDeleteButtonClicked(row)}\n                                  ></EditorToolbarButton>\n                                </div>\n                              </Card>\n                            </div>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </DragDropContext>\n      </div>\n      <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n        <Button icon=\"Plus\" buttonType=\"naked\" onClick={onAddButtonClicked}>\n          Add\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport default RelationsRepeaterField;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  FieldExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations\n} from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport './index.css';\n\nimport RelationsRepeaterField from './components/RelationsRepeaterField';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk: BaseExtensionSDK) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <RelationsRepeaterField sdk={sdk as FieldExtensionSDK} />\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach(componentLocationSetting => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}